import { NextResponse } from "next/server";
import { createServerClient } from "@supabase/ssr";
import { cookies } from 'next/headers'

/**
 * Route API GET /api/options
 * 
 * Cette route sert √† r√©cup√©rer dynamiquement les options hi√©rarchiques (cat√©gories, sous-cat√©gories, etc.)
 * depuis la table `select_options` dans Supabase.
 * 
 * Elle est utilis√©e par le composant <DynamicSelectGroup /> pour construire des menus d√©roulants d√©pendants.
 */

export async function GET(request: Request) {
    // Cr√©ation du client Supabase c√¥t√© serveur, en utilisant les cookies de l'utilisateur connect√©
    // üß© Correction ici : cookies() est une Promise en Next 15+
    const cookieStore = await cookies();


    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!, // ‚ö†Ô∏è service role key c√¥t√© serveur uniquement
      {
        cookies: {
          get(name: string) {
            return cookieStore.get(name)?.value;
          },
          set() {},
          remove() {},
        },
      }
    );

    // Extraction des param√®tres d'URL
    const { searchParams } = new URL(request.url);
    const type = searchParams.get("category");  // Exemple : "evenement", "repas", "residence"
    console.log('type envoy√© : ', type)
    const parentId = searchParams.get("parentId"); // Exemple : "12" ‚Üí ID du parent pour r√©cup√©rer ses enfants

    // Pr√©paration de la requ√™te de base
    // On s√©lectionne toutes les colonnes de la table "select_options"
    // et on trie les r√©sultats par label (ordre alphab√©tique)
    let query = supabase.from("select_options").select("*").order("label");

    // Application des filtres selon les param√®tres re√ßus
    if (parentId) {
        // Si on a un parentId, on r√©cup√®re les enfants directs de cet √©l√©ment
        query = query.eq("parent_id", parentId);
    } 
    else if (type) {
        // Sinon, si on a un type (category), on r√©cup√®re les √©l√©ments racine de cette cat√©gorie
        // (donc ceux dont parent_id est NULL)
        query = query.eq("category", type).is("parent_id", null);
    } 
    else {
        // Fallback : si aucun param√®tre, on retourne tous les √©l√©ments racine (sans parent)
        query = query.is("parent_id", null);
    }

    // Ex√©cution de la requ√™te
    const { data, error } = await query;

    // Gestion des erreurs
    if (error) {
        // Si une erreur Supabase est renvoy√©e, on la renvoie au client avec un code HTTP 400
        return NextResponse.json({ error: error.message }, { status: 400 });
    }

    // R√©ponse r√©ussie : on renvoie les options trouv√©es au format JSON
    return NextResponse.json(data);
}
